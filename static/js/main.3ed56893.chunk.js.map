{"version":3,"sources":["components/TodoInput/TodoInput.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoFilter/TodoFilter.jsx","TodoApp.js","helpers/useLocalStorage.jsx","index.js"],"names":["TodoInput","onCreate","useState","inputQuery","setInputQuery","handleTodo","useCallback","event","value","target","handleSumbit","key","className","type","placeholder","onChange","onKeyDown","TodoItem","todo","onComplete","onRemove","isEditable","setIsEditable","title","setTitle","handleInput","handleSubmit","handleOnBLur","currentTarget","classNames","completed","editing","readOnly","checked","onClick","id","onDoubleClick","onBlur","defaultProps","TodoList","Route","status","params","enum","TodoListRoute","todos","onToggle","match","isComplete","every","htmlFor","filter","map","todosData","Date","TodoFilter","onRemoveCompleted","uncompletedTodos","length","to","link","activeClassName","some","TodoApp","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","storageTodos","setStorageTodos","prevTodos","newTodos","ReactDOM","render","document","getElementById"],"mappings":"+TAGO,IAAMA,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAGnCC,EAAaC,uBACjB,SAACC,GAAW,IACFC,EAAUD,EAAME,OAAhBD,MAERJ,EAAcI,KACb,IAGCE,EAAeJ,uBACnB,SAACC,GACmB,UAAdA,EAAMI,KAAmBR,IAC3BF,EAASE,GACTC,EAAc,OAEf,CAACD,EAAYF,IAGlB,OACE,4BAAQW,UAAU,UAChB,qCACA,2BACEC,KAAK,OACLD,UAAU,WACVE,YAAY,yBACZN,MAAOL,EACPY,SAAUV,EACVW,UAAWN,M,yBC5BNO,EAAW,SAAC,GAIlB,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,WACAC,EACI,EADJA,SACI,EACgClB,oBAAS,GADzC,mBACGmB,EADH,KACeC,EADf,OAEsBpB,mBAASgB,EAAKK,OAFpC,mBAEGA,EAFH,KAEUC,EAFV,OAGgCtB,mBAASqB,GAHzC,mBAGGpB,EAHH,KAGeC,EAHf,KASEqB,EAAcnB,uBAClB,SAACC,GAAW,IACFC,EAAUD,EAAME,OAAhBD,MAERJ,EAAcI,KACb,IAGCkB,EAAepB,uBACnB,SAACC,GACC,GAAkB,WAAdA,EAAMI,IAIR,OAHAW,GAAc,QACdlB,EAAcmB,GAKE,UAAdhB,EAAMI,KAAmBR,IAC3BqB,EAASrB,GACTmB,GAAc,MAEf,CAACnB,EAAYoB,IAGZI,EAAerB,uBACnB,SAACC,GAAW,IACFqB,EAA0BrB,EAA1BqB,cAAenB,EAAWF,EAAXE,OAEnBN,GAAcyB,IAAkBnB,IAClCe,EAASrB,GACTmB,GAAc,MAEf,CAACnB,IAGN,OACE,wBAAIS,UAAWiB,IAAW,CACxBC,UAAWZ,EAAKY,WAElB,CACEC,QAASV,KAGT,yBAAKT,UAAU,QACb,2BACEC,KAAK,WACLmB,UAAQ,EACRpB,UAAU,SACVqB,QAASf,EAAKY,UACdI,QAAS,kBAAMf,EAAWD,EAAKiB,OAEjC,2BAAOC,cAvDS,WACpBd,GAAc,KAuDPC,GAEH,4BACEV,KAAK,SACLD,UAAU,UACVsB,QAAS,kBAAMd,EAASF,EAAKiB,QAGjC,2BACEtB,KAAK,OACLD,UAAU,OACVJ,MAAOL,EACPY,SAAUU,EACVT,UAAWU,EACXW,OAAQV,MAgBhBV,EAASqB,aAAe,CACtBpB,KAAM,MC/FR,IAIaqB,EAJSC,gBAAM,CAC1BC,OAAQD,QAAME,OAAOC,KAAK,MAAO,SAAU,eAC1C,gBAAGF,EAAH,EAAGA,OAAH,iBAAoBA,KAECG,EAAc,YAM/B,IALLC,EAKI,EALJA,MACA1B,EAII,EAJJA,WACA2B,EAGI,EAHJA,SACA1B,EAEI,EAFJA,SACmBqB,EACf,EADJM,MAASL,OAAUD,OAEbO,EAAaH,EAAMI,OAAM,SAAA/B,GAAI,OAAIA,EAAKY,aAE5C,OACE,oCACE,2BACEjB,KAAK,WACLmB,UAAQ,EACRG,GAAG,aACHvB,UAAU,aACVsB,QAAS,kBAAMY,EAASE,MAE1B,2BAAOE,QAAQ,cAAf,wBAGA,wBAAItC,UAAU,aACXiC,EAAMM,QAAO,SAACjC,GACb,MAAe,cAAXuB,EACKvB,EAAKY,UAGC,WAAXW,GACMvB,EAAKY,UAGRZ,KACNkC,KAAI,SAAAlC,GAAI,OACT,kBAAC,EAAD,CACEP,IAAKO,EAAKiB,GACVjB,KAAMA,EACNC,WAAYA,EACZC,SAAUA,YCzChBiC,EAAY,CAChB,CAAEZ,OAAQ,MAAON,IAAK,IAAImB,KAAQ/B,MAAO,OACzC,CAAEkB,OAAQ,SAAUN,IAAK,IAAImB,KAAQ/B,MAAO,UAC5C,CAAEkB,OAAQ,YAAaN,IAAK,IAAImB,KAAQ/B,MAAO,cAGpCgC,EAAa,SAAC,GAGpB,IAFLV,EAEI,EAFJA,MACAW,EACI,EADJA,kBAEMC,EAAmBZ,EAAMM,QAAO,SAAAjC,GAAI,OAAKA,EAAKY,aAEpD,OACE,4BAAQlB,UAAU,UAChB,0BAAMA,UAAU,cACb6C,EAAiBC,OAAS,EAA1B,UACMD,EAAiBC,OADvB,8BAKH,wBAAI9C,UAAU,WACXyC,EAAUD,KAAI,SAAAlC,GAAI,OACjB,wBAAIP,IAAKO,EAAKiB,IACZ,kBAAC,IAAD,CACEwB,GAAIpB,EAASqB,KAAK,CAAEnB,OAAQvB,EAAKuB,SACjCoB,gBAAgB,YAEf3C,EAAKK,YAMbsB,EAAMiB,MAAK,SAAA5C,GAAI,OAAIA,EAAKY,cACzB,4BACEjB,KAAK,SACLD,UAAU,kBACVsB,QAASsB,GAHX,qBAqBND,EAAWjB,aAAe,CACxBO,MAAO,IC6BMkB,MAlFf,WAAoB,IAAD,ECNZ,SAAyBpD,EAAKqD,GAAe,IAAD,EACX9D,oBAAS,WAC7C,IACE,IAAM+D,EAAOC,OAAOC,aAAaC,QAAQzD,GAEzC,OAAOsD,EAAOI,KAAKC,MAAML,GAAQD,EACjC,MAAOO,GAIP,OAFAC,QAAQC,IAAIF,GAELP,MAVsC,mBAC1CU,EAD0C,KAC7BC,EAD6B,KA2BjD,MAAO,CAACD,EAbS,SAAClE,GAChB,IACE,IAAMoE,EACFpE,aAAiBqE,SAAWrE,EAAMkE,GAAelE,EAErDmE,EAAeC,GACfV,OAAOC,aAAaW,QAAQnE,EAAK0D,KAAKU,UAAUH,IAChD,MAAOL,GAEPC,QAAQC,IAAIF,MDhBwBS,CAAgB,QAAS,IADhD,mBACVC,EADU,KACIC,EADJ,KAGXjF,EAAWK,uBACf,SAACiB,GACC2D,GAAgB,SAAAC,GAAS,4BAAQA,GAAR,CAAmB,CAC1CrD,WAAW,EACXP,QACAY,IAAK,IAAImB,aAEV,IAGCnC,EAAab,uBACjB,SAAC6B,GACC,IAAMiD,EAAWH,EAAa7B,KAAI,SAAAlC,GAAI,OAAKA,EAAKiB,KAAOA,EAAZ,2BACtCjB,GADsC,IAEzCY,WAAYZ,EAAKY,YAEfZ,KAEJgE,EAAgBE,KACf,CAACH,IAGAnC,EAAWxC,uBACf,SAACwB,GACC,IAAMsD,EAAWH,EAAa7B,KAAI,SAAAlC,GAAI,kCACjCA,GADiC,IAEpCY,WAAYA,OAGdoD,EAAgBE,KACf,CAACH,IAGA7D,EAAWd,uBACf,SAAC6B,GACC,IAAMiD,EAAWH,EAAa9B,QAAO,SAAAjC,GAAI,OAAIA,EAAKiB,KAAOA,KAEzD+C,EAAgBE,KACf,CAACH,IAGAzB,EAAoBlD,uBACxB,WACE,IAAM8E,EAAWH,EAAa9B,QAAO,SAAAjC,GAAI,OAAKA,EAAKY,aAEnDoD,EAAgBE,KACf,CAACH,IAGN,OACE,6BAASrE,UAAU,WACjB,kBAAC,EAAD,CAAWX,SAAUA,IACrB,6BAASW,UAAU,QAEjB,kBAAC,SAAD,KACGqE,EAAavB,OAAS,GAEnB,kBAACnB,EAAD,CACEM,MAAOoC,EACP9D,WAAYA,EACZ2B,SAAUA,EACV1B,SAAUA,IAGhB,kBAAC,WAAD,CAAUuC,GAAIpB,EAASqB,KAAK,CAAEnB,OAAQ,YAIzCwC,EAAavB,OAAS,GAEnB,kBAAC,EAAD,CACEb,MAAOoC,EACPzB,kBAAmBA,MEzE/B6B,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3ed56893.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoInput = ({ onCreate }) => {\n  const [inputQuery, setInputQuery] = useState('');\n\n  const handleTodo = useCallback(\n    (event) => {\n      const { value } = event.target;\n\n      setInputQuery(value);\n    }, [],\n  );\n\n  const handleSumbit = useCallback(\n    (event) => {\n      if (event.key === 'Enter' && inputQuery) {\n        onCreate(inputQuery);\n        setInputQuery('');\n      }\n    }, [inputQuery, onCreate],\n  );\n\n  return (\n    <header className=\"header\">\n      <h1>Todos</h1>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={inputQuery}\n        onChange={handleTodo}\n        onKeyDown={handleSumbit}\n      />\n    </header>\n  );\n};\n\nTodoInput.propTypes = {\n  onCreate: PropTypes.func.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({\n  todo,\n  onComplete,\n  onRemove,\n}) => {\n  const [isEditable, setIsEditable] = useState(false);\n  const [title, setTitle] = useState(todo.title);\n  const [inputQuery, setInputQuery] = useState(title);\n\n  const handleEditing = () => {\n    setIsEditable(true);\n  };\n\n  const handleInput = useCallback(\n    (event) => {\n      const { value } = event.target;\n\n      setInputQuery(value);\n    }, [],\n  );\n\n  const handleSubmit = useCallback(\n    (event) => {\n      if (event.key === 'Escape') {\n        setIsEditable(false);\n        setInputQuery(title);\n\n        return;\n      }\n\n      if (event.key === 'Enter' && inputQuery) {\n        setTitle(inputQuery);\n        setIsEditable(false);\n      }\n    }, [inputQuery, title],\n  );\n\n  const handleOnBLur = useCallback(\n    (event) => {\n      const { currentTarget, target } = event;\n\n      if (inputQuery && currentTarget === target) {\n        setTitle(inputQuery);\n        setIsEditable(false);\n      }\n    }, [inputQuery],\n  );\n\n  return (\n    <li className={classNames({\n      completed: todo.completed,\n    },\n    {\n      editing: isEditable,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          readOnly\n          className=\"toggle\"\n          checked={todo.completed}\n          onClick={() => onComplete(todo.id)}\n        />\n        <label onDoubleClick={handleEditing}>\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => onRemove(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={inputQuery}\n        onChange={handleInput}\n        onKeyDown={handleSubmit}\n        onBlur={handleOnBLur}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n  onComplete: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nTodoItem.defaultProps = {\n  todo: null,\n};\n","import React from 'react';\nimport { Route } from 'react-router-hoc';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nconst TodoListRoute = Route({\n  status: Route.params.enum('all', 'active', 'completed'),\n}, ({ status }) => `/${status}`);\n\nexport const TodoList = TodoListRoute(({\n  todos,\n  onComplete,\n  onToggle,\n  onRemove,\n  match: { params: { status } },\n}) => {\n  const isComplete = todos.every(todo => todo.completed);\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        readOnly\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onClick={() => onToggle(isComplete)}\n      />\n      <label htmlFor=\"toggle-all\">\n        Mark all as complete\n      </label>\n      <ul className=\"todo-list\">\n        {todos.filter((todo) => {\n          if (status === 'completed') {\n            return todo.completed;\n          }\n\n          if (status === 'active') {\n            return !todo.completed;\n          }\n\n          return todo;\n        }).map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            onComplete={onComplete}\n            onRemove={onRemove}\n          />\n        ))}\n      </ul>\n    </>\n  );\n});\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { TodoList } from '../TodoList';\n\nconst todosData = [\n  { status: 'all', id: +new Date(), title: 'All' },\n  { status: 'active', id: +new Date(), title: 'Active' },\n  { status: 'completed', id: +new Date(), title: 'Completed' },\n];\n\nexport const TodoFilter = ({\n  todos,\n  onRemoveCompleted,\n}) => {\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {uncompletedTodos.length > 0\n          ? `${uncompletedTodos.length} not completed`\n          : `all done`}\n      </span>\n\n      <ul className=\"filters\">\n        {todosData.map(todo => (\n          <li key={todo.id}>\n            <NavLink\n              to={TodoList.link({ status: todo.status })}\n              activeClassName=\"selected\"\n            >\n              {todo.title}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n\n      {todos.some(todo => todo.completed) && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onRemoveCompleted}\n      >\n        Clear completed\n      </button>\n      )}\n    </footer>\n  );\n};\n\nTodoFilter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n  onRemoveCompleted: PropTypes.func.isRequired,\n};\n\nTodoFilter.defaultProps = {\n  todos: [],\n};\n","import React, { useCallback } from 'react';\nimport { Switch, Redirect } from 'react-router-dom';\nimport { useLocalStorage } from './helpers/useLocalStorage';\n\nimport { TodoInput } from './components/TodoInput';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nfunction TodoApp() {\n  const [storageTodos, setStorageTodos] = useLocalStorage('todos', []);\n\n  const onCreate = useCallback(\n    (title) => {\n      setStorageTodos(prevTodos => [...prevTodos, {\n        completed: false,\n        title,\n        id: +new Date(),\n      }]);\n    }, [],\n  );\n\n  const onComplete = useCallback(\n    (id) => {\n      const newTodos = storageTodos.map(todo => (todo.id === id ? ({\n        ...todo,\n        completed: !todo.completed,\n      })\n        : todo));\n\n      setStorageTodos(newTodos);\n    }, [storageTodos],\n  );\n\n  const onToggle = useCallback(\n    (completed) => {\n      const newTodos = storageTodos.map(todo => ({\n        ...todo,\n        completed: !completed,\n      }));\n\n      setStorageTodos(newTodos);\n    }, [storageTodos],\n  );\n\n  const onRemove = useCallback(\n    (id) => {\n      const newTodos = storageTodos.filter(todo => todo.id !== id);\n\n      setStorageTodos(newTodos);\n    }, [storageTodos],\n  );\n\n  const onRemoveCompleted = useCallback(\n    () => {\n      const newTodos = storageTodos.filter(todo => !todo.completed);\n\n      setStorageTodos(newTodos);\n    }, [storageTodos],\n  );\n\n  return (\n    <section className=\"todoapp\">\n      <TodoInput onCreate={onCreate} />\n      <section className=\"main\">\n\n        <Switch>\n          {storageTodos.length > 0\n            && (\n              <TodoList\n                todos={storageTodos}\n                onComplete={onComplete}\n                onToggle={onToggle}\n                onRemove={onRemove}\n              />\n            )}\n          <Redirect to={TodoList.link({ status: 'all' })} />\n        </Switch>\n      </section>\n\n      {storageTodos.length > 0\n        && (\n          <TodoFilter\n            todos={storageTodos}\n            onRemoveCompleted={onRemoveCompleted}\n          />\n        )}\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore\n        = value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n  <HashRouter>\n    <TodoApp />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}